
name: PO
on:
  push:
    branches:
      - pre-prod
  pull_request:
concurrency:
  group: develop-wellness-${{ github.event.number }}
  cancel-in-progress: true
jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    name: Server
    services:
      redis-cache:
        image: redis:alpine
        ports:
          - 13000:6379
      redis-queue:
        image: redis:alpine
        ports:
          - 11000:6379
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mariadb-admin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          check-latest: true
      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/*requirements.txt', '**/pyproject.toml', '**/setup.py', '**/setup.cfg') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: 'echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT'
      - uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install MariaDB Client
        run: sudo apt-get install mariadb-client mariadb-server

      - name: Install Redis Server
        run: sudo apt-get install redis-server -y

      - name: Install Dependencies
        run: |
          pip install pytest pytest-cov
          
      - name: Setup
        run: |
          pip install frappe-bench
          bench init --skip-redis-config-generation --skip-assets --python "$(which python)" ~/frappe-bench
          mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL character_set_server = 'utf8mb4'"
          mariadb --host 127.0.0.1 --port 3306 -u root -proot -e "SET GLOBAL collation_server = 'utf8mb4_unicode_ci'"
      - name: Install
        working-directory: /home/runner/frappe-bench
        run: |
          bench get-app erpnext https://github.com/tinadn/erpnext.git --branch develop
          bench setup requirements --dev
          bench new-site --db-root-password root --admin-password admin test_site
          bench --site test_site install-app erpnext
        env:
          CI: 'Yes'
      - name: Run Tests
        working-directory: /home/runner/frappe-bench
        run: |
          bench --site test_site set-config allow_tests true
          bench --site test_site run-tests --doctype "Purchase Order"
        env:
          TYPE: server
          

      # Step 5: Run tests with detailed coverage
      - name: Run Tests
        run: |
          cd frappe-bench/apps/erpnext
          pytest --cov=erpnext --cov-report=term-missing --cov-report=xml --cov-fail-under=100

      # Step 6: Upload code coverage report
      - name: Upload Coverage Report
        uses: acid-chicken/lcov-reporter-action@v0.4.1
        with:
          coverage_file: frappe-bench/apps/erpnext/coverage.xml
          minimum_coverage: 100
        env:
          DEV_TOKEN: ${{ secrets.DEV_TOKEN }}
